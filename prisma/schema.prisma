// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  username String @unique
  password String

  profile    Profile?
  posts    Post[]
  likes      Like[]
  replies    Reply[]
  followers  Follow[] @relation("UserFollowed")
  followings Follow[] @relation("UserFollows")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id String @id @default(uuid())

  fullName  String
  avatarUrl String?
  bannerUrl String?
  bio       String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Post {
  id      String  @id @default(uuid())

  content String
  images  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  likes   Like[]
  replies Reply[]

  isEdited Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Follow {
  id String @id @default(uuid())

  follower   User   @relation(name: "UserFollows", fields: [followerId], references: [id])
  followerId String

  following   User   @relation(name: "UserFollowed", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

model Like {
  id String @id @default(uuid())

  post   Post? @relation(fields: [postId], references: [id])
  postId String?

  reply Reply? @relation(fields: [replyId], references: [id])
  replyId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model Reply {
  id String @id @default(uuid())

  content String
  images  String?

  post   Post @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  likes Like[]

  isEdited Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("replies")
}